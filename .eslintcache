[{"/home/pranil/My code/conquer/src/index.js":"1","/home/pranil/My code/conquer/src/serviceWorkerRegistration.js":"2","/home/pranil/My code/conquer/src/App.js":"3","/home/pranil/My code/conquer/src/PrivateRoute.js":"4","/home/pranil/My code/conquer/src/firebase.js":"5","/home/pranil/My code/conquer/src/ClosedRoute.js":"6","/home/pranil/My code/conquer/src/loadingContext.js":"7","/home/pranil/My code/conquer/src/Components/Landing/Landing.js":"8","/home/pranil/My code/conquer/src/Components/Login/Login.js":"9","/home/pranil/My code/conquer/src/Components/Notes/Notes.js":"10","/home/pranil/My code/conquer/src/Components/Signup/Signup.js":"11","/home/pranil/My code/conquer/src/Components/Daily/Daily.js":"12","/home/pranil/My code/conquer/src/Components/Loading/Loading.js":"13","/home/pranil/My code/conquer/src/Components/Week/Week.js":"14","/home/pranil/My code/conquer/src/Components/Year/Year.js":"15","/home/pranil/My code/conquer/src/Components/Month/Month.js":"16","/home/pranil/My code/conquer/src/Components/VisionBoard/VisionBoard.js":"17","/home/pranil/My code/conquer/src/Components/LongTerm/LongTerm.js":"18","/home/pranil/My code/conquer/src/Components/AllTodos/AllTodos.js":"19","/home/pranil/My code/conquer/src/Components/Navbar/Navbar.js":"20","/home/pranil/My code/conquer/src/Components/Sidebar/Sidebar.js":"21","/home/pranil/My code/conquer/src/Components/Calendar/Calendar.js":"22","/home/pranil/My code/conquer/src/Components/MonthCalendar/MonthCalendar.js":"23","/home/pranil/My code/conquer/src/Components/WeekCalendar/WeekCalendar.js":"24","/home/pranil/My code/conquer/src/Components/IncompleteTodosSidebar/IncompleteTodosSidebar.js":"25","/home/pranil/My code/conquer/src/Components/YearPicker/YearPicker.js":"26","/home/pranil/My code/conquer/src/Components/NewTodoModal/NewTodoModal.js":"27","/home/pranil/My code/conquer/src/Components/EachTodo/EachTodo.js":"28"},{"size":543,"mtime":1632650700569,"results":"29","hashOfConfig":"30"},{"size":5092,"mtime":1632650700569,"results":"31","hashOfConfig":"30"},{"size":2529,"mtime":1632652333011,"results":"32","hashOfConfig":"30"},{"size":723,"mtime":1632650700565,"results":"33","hashOfConfig":"30"},{"size":521,"mtime":1632650700565,"results":"34","hashOfConfig":"30"},{"size":720,"mtime":1632650700561,"results":"35","hashOfConfig":"30"},{"size":166,"mtime":1632650700569,"results":"36","hashOfConfig":"30"},{"size":566,"mtime":1632655095010,"results":"37","hashOfConfig":"30"},{"size":4014,"mtime":1632650700561,"results":"38","hashOfConfig":"30"},{"size":664,"mtime":1632650700561,"results":"39","hashOfConfig":"30"},{"size":4408,"mtime":1632650700561,"results":"40","hashOfConfig":"30"},{"size":921,"mtime":1632650700561,"results":"41","hashOfConfig":"30"},{"size":369,"mtime":1632650700561,"results":"42","hashOfConfig":"30"},{"size":634,"mtime":1632650700565,"results":"43","hashOfConfig":"30"},{"size":692,"mtime":1632650700565,"results":"44","hashOfConfig":"30"},{"size":612,"mtime":1632650700561,"results":"45","hashOfConfig":"30"},{"size":724,"mtime":1632650700561,"results":"46","hashOfConfig":"30"},{"size":459,"mtime":1632650700561,"results":"47","hashOfConfig":"30"},{"size":14125,"mtime":1632650700561,"results":"48","hashOfConfig":"30"},{"size":873,"mtime":1632650700561,"results":"49","hashOfConfig":"30"},{"size":1871,"mtime":1632650700561,"results":"50","hashOfConfig":"30"},{"size":7114,"mtime":1632742240582,"results":"51","hashOfConfig":"30"},{"size":1843,"mtime":1632650700561,"results":"52","hashOfConfig":"30"},{"size":6112,"mtime":1632650700565,"results":"53","hashOfConfig":"30"},{"size":8432,"mtime":1632650700561,"results":"54","hashOfConfig":"30"},{"size":867,"mtime":1632650700565,"results":"55","hashOfConfig":"30"},{"size":8073,"mtime":1632760649297,"results":"56","hashOfConfig":"30"},{"size":7430,"mtime":1632650700561,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"fbixx5",{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"60"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"60"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"60"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"60"},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"60"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"60"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"60"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"60"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"60"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"60"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"60"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"60"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"60"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"60"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"60"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"60"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"60"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"60"},"/home/pranil/My code/conquer/src/index.js",[],["133","134"],"/home/pranil/My code/conquer/src/serviceWorkerRegistration.js",[],"/home/pranil/My code/conquer/src/App.js",["135","136"],"import \"./App.css\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Landing from \"./Components/Landing/Landing\";\nimport Signup from \"./Components/Signup/Signup\";\nimport Login from \"./Components/Login/Login\";\nimport Daily from \"./Components/Daily/Daily\";\nimport Notes from \"./Components/Notes/Notes\";\nimport firebaseApp from \"./firebase\";\nimport Loading from \"./Components/Loading/Loading\";\nimport { useEffect, useState } from \"react\";\nimport PrivateRoute from \"./PrivateRoute\";\nimport ClosedRoute from \"./ClosedRoute\";\nimport Week from \"./Components/Week/Week\";\nimport Month from \"./Components/Month/Month\";\nimport Year from \"./Components/Year/Year\";\nimport LongTerm from \"./Components/LongTerm/LongTerm\";\nimport VisionBoard from \"./Components/VisionBoard/VisionBoard\";\nimport { loadingContext } from \"./loadingContext\";\nimport AllTodos from \"./Components/AllTodos/AllTodos\";\n\n//this component handles all the routes\nfunction App() {\n  const [firebaseInitialized, setFirebaseInitialized] = useState(false);\n  useEffect(() => {\n    firebaseApp.auth().onAuthStateChanged((user) => {\n      //this function observes the state of authentication...returns none if user doesnt exist..returns true if the user exist..and returns false if the user is being created or loaded..\n      setFirebaseInitialized(user); //setting that user to predefined state\n    });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        {/* passing the auth status in context provider */}\n        <loadingContext.Provider value={firebaseInitialized}>\n          <Switch>\n            <ClosedRoute exact path=\"/\" component={Landing} />\n            <ClosedRoute exact path=\"/signup\" component={Signup} />\n            <ClosedRoute exact path=\"/login\" component={Login} />\n            <PrivateRoute exact path=\"/daily\" component={Daily} />\n            <PrivateRoute exact path=\"/notes\" component={Notes} />\n            <PrivateRoute exact path=\"/daily\" component={Daily} />\n            <PrivateRoute exact path=\"/week\" component={Week} />\n            <PrivateRoute exact path=\"/month\" component={Month} />\n            <PrivateRoute exact path=\"/year\" component={Year} />\n            <PrivateRoute exact path=\"/longTerm\" component={LongTerm} />\n            <PrivateRoute exact path=\"/visionBoard\" component={VisionBoard} />\n            <PrivateRoute exact path=\"/:time/allTodos\" component={AllTodos} />\n          </Switch>\n        </loadingContext.Provider>\n      </BrowserRouter>\n    </div>\n  )\n}\n\nexport default App;\n","/home/pranil/My code/conquer/src/PrivateRoute.js",["137"],"import React, { useContext } from \"react\";\nimport { Redirect, Route } from \"react-router-dom\";\nimport Loading from \"./Components/Loading/Loading\";\nimport { loadingContext } from \"./loadingContext\";\n\nfunction PrivateRoute(props) {\n  const user = useContext(loadingContext);\n  return (\n    <Route\n      path={props.path}\n      render={(data) =>\n        user != null ? ( //if the user exists the componetn is rendered...\n          <props.component {...data}></props.component>\n        ) : user == false ? (\n          <Loading />\n        ) : (\n          //else the user is redirected to login page\n          <Redirect to={{ pathname: \"/login\" }}></Redirect>\n        )\n      }\n    ></Route>\n  );\n}\n\nexport default PrivateRoute;\n","/home/pranil/My code/conquer/src/firebase.js",[],"/home/pranil/My code/conquer/src/ClosedRoute.js",["138"],"import React, { useContext } from \"react\";\nimport { Redirect, Route } from \"react-router-dom\";\nimport Loading from \"./Components/Loading/Loading\";\nimport { loadingContext } from \"./loadingContext\";\n\nfunction ClosedRoute(props) {\n  const user = useContext(loadingContext);\n  return (\n    <Route\n      path={props.path}\n      render={(data) =>\n        user == null ? ( //if the user is logged in he is redirected to daily page...\n          <props.component {...data}></props.component>\n        ) : user == false ? (\n          <Loading />\n        ) : (\n          //else he remains on that route\n          <Redirect to={{ pathname: \"/daily\" }}></Redirect>\n        )\n      }\n    ></Route>\n  );\n}\n\nexport default ClosedRoute;\n","/home/pranil/My code/conquer/src/loadingContext.js",[],"/home/pranil/My code/conquer/src/Components/Landing/Landing.js",[],"/home/pranil/My code/conquer/src/Components/Login/Login.js",["139","140","141","142"],"import React, { useState, forwardRef } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport Navbar from \"../Navbar/Navbar\";\nimport \"./Login.css\";\nimport google_logo from \"../../images/google_logo.png\";\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\nimport {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle,\n  IconButton,\n  Slide,\n} from \"@material-ui/core\";\nimport VisibilityOffIcon from \"@material-ui/icons/VisibilityOff\";\nimport Loading from \"../Loading/Loading\";\nimport firebaseApp from \"../../firebase\";\nimport firebase from \"firebase\";\n\nfunction Login() {\n  const history = useHistory();\n  const [wantsPassword, setWantsPassword] = useState(false);\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [loading, setLoading] = useState(null);\n  const [openAlertModal, setOpenAlertModal] = useState(false);\n  const [alertMessage, setAlertMessage] = useState(false);\n\n  const login = async () => {\n    setLoading(true); //this prompts to render the custom Loading component which is a loading circle\n    try {\n      await firebaseApp.auth().signInWithEmailAndPassword(email, password);\n      history.push(\"/daily\");\n    } catch (error) {\n      setLoading(false);\n      setAlertMessage(error.message);\n      setOpenAlertModal(true);\n    }\n  };\n\n  const loginGoogle = async () => {\n    setLoading(true);\n    let provider = new firebase.auth.GoogleAuthProvider();\n    await firebaseApp\n      .auth()\n      .signInWithPopup(provider)\n      .catch((error) => {\n        setLoading(false);\n        setAlertMessage(error.message);\n        setOpenAlertModal(true);\n      });\n    history.push(\"/daily\");\n  };\n\n  const toggle = () => {\n    //this toggles the password field from password type(and enable visibilty button) and text type(and disable visibilty button)\n    setWantsPassword(!wantsPassword);\n    if (wantsPassword) {\n      return (document.getElementById(\"passwordField\").type = \"password\");\n    } else {\n      return (document.getElementById(\"passwordField\").type = \"text\");\n    }\n  };\n\n  return !loading ? (\n    <div className=\"login\">\n      <Dialog\n        open={openAlertModal}\n        onClose={() => setOpenAlertModal(false)}\n        aria-labelledby=\"alert-dialog-slide-title\"\n        aria-describedby=\"alert-dialog-slide-description\"\n      >\n        <DialogTitle id=\"alert-dialog-slide-title\">{alertMessage}</DialogTitle>\n        <DialogActions>\n          <Button onClick={() => setOpenAlertModal(false)} color=\"primary\">\n            Fine..\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <Navbar />\n      <div className=\"loginPage\">\n        <div className=\"loginForm\">\n          <div className=\"field\">\n            <div className=\"fieldName\">Email</div>\n            <input\n              type=\"email\"\n              value={email}\n              spellCheck=\"false\"\n              onChange={(e) => setEmail(e.target.value)}\n            />\n          </div>\n          <div className=\"field\">\n            <div className=\"fieldName\">Password</div>\n            <input\n              type=\"password\"\n              value={password}\n              id=\"passwordField\"\n              spellCheck=\"false\"\n              onChange={(e) => setPassword(e.target.value)}\n            />\n            <IconButton onClick={() => toggle()}>\n              {wantsPassword ? <VisibilityOffIcon /> : <VisibilityIcon />}\n            </IconButton>\n          </div>\n          <button className=\"loginButton\" onClick={login}>\n            Login\n          </button>\n          <button\n            className=\"loginButton googleLoginButton\"\n            onClick={loginGoogle}\n          >\n            <span>Login with</span>\n            <img src={google_logo} alt=\"\" />\n          </button>\n          <div className=\"signupText\">\n            Don't have an account?&nbsp;<Link to=\"/signup\">Signup</Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  ) : (\n    <Loading />\n  );\n}\n\nexport default Login;\n","/home/pranil/My code/conquer/src/Components/Notes/Notes.js",[],"/home/pranil/My code/conquer/src/Components/Signup/Signup.js",["143"],"import React, { useEffect, useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport Navbar from \"../Navbar/Navbar\";\nimport \"./Signup.css\";\nimport google_logo from \"../../images/google_logo.png\";\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\nimport { Button, Dialog, DialogActions, DialogTitle, IconButton } from \"@material-ui/core\";\nimport VisibilityOffIcon from \"@material-ui/icons/VisibilityOff\";\nimport firebaseApp from \"../../firebase\";\nimport Loading from \"../Loading/Loading\";\nimport firebase from \"firebase\";\n\nfunction Signup() {\n  const history = useHistory();\n  const [loading, setLoading] = useState(null);\n  const [username, setUsername] = useState(\"\");\n  const [wantsPassword, setWantsPassword] = useState(false);\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [openAlertModal, setOpenAlertModal] = useState(false);\n  const [alertMessage, setAlertMessage] = useState(false);\n\n  const signUp = async (e) => {\n    setLoading(true); //this prompts to render the custom Loading component which is a loading circle\n    try {\n      await firebaseApp.auth().createUserWithEmailAndPassword(email, password);\n      await firebaseApp\n        .auth()\n        .currentUser.updateProfile({ displayName: username });\n      history.push(\"/daily\");\n    } catch (error) {\n      setLoading(false);\n      setAlertMessage(error.message);\n      setOpenAlertModal(true);\n    }\n  };\n\n  const signUpgoogle = async () => {\n    setLoading(true);\n    let provider = new firebase.auth.GoogleAuthProvider();\n    await firebaseApp\n      .auth()\n      .signInWithPopup(provider)\n      .catch((error) => {\n        setLoading(false);\n        setAlertMessage(error.message);\n        setOpenAlertModal(true);\n      });\n    history.push(\"/daily\");\n  };\n\n  const toggle = () => {\n    //this toggles the password field from password type(and enable visibilty button) and text type(and disable visibilty button)\n    setWantsPassword(!wantsPassword);\n    if (wantsPassword) {\n      return (document.getElementById(\"passwordField\").type = \"password\");\n    } else {\n      return (document.getElementById(\"passwordField\").type = \"text\");\n    }\n  };\n\n  return !loading ? (\n    <div className=\"signup\">\n      <Dialog\n        open={openAlertModal}\n        onClose={() => setOpenAlertModal(false)}\n        aria-labelledby=\"alert-dialog-slide-title\"\n        aria-describedby=\"alert-dialog-slide-description\"\n      >\n        <DialogTitle id=\"alert-dialog-slide-title\">{alertMessage}</DialogTitle>\n        <DialogActions>\n          <Button onClick={() => setOpenAlertModal(false)} color=\"primary\">\n            Fine..\n          </Button>\n        </DialogActions>\n      </Dialog>\n      <Navbar />\n      <div className=\"signupPage\">\n        <div className=\"signupForm\">\n          <div className=\"field\">\n            <div className=\"fieldName\">Username</div>\n            <input\n              type=\"text\"\n              spellCheck=\"false\"\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n            />\n          </div>\n          <div className=\"field\">\n            <div className=\"fieldName\">Email</div>\n            <input\n              type=\"email\"\n              value={email}\n              spellCheck=\"false\"\n              onChange={(e) => setEmail(e.target.value)}\n            />\n          </div>\n          <div className=\"field\">\n            <div className=\"fieldName\">Password</div>\n            <input\n              type=\"password\"\n              value={password}\n              id=\"passwordField\"\n              spellCheck=\"false\"\n              onChange={(e) => setPassword(e.target.value)}\n            />\n            <IconButton onClick={() => toggle()}>\n              {wantsPassword ? <VisibilityOffIcon /> : <VisibilityIcon />}\n            </IconButton>\n          </div>\n          <button className=\"signupButton\" onClick={signUp}>\n            Sign Up\n          </button>\n          <button\n            className=\"signupButton googleSignupButton\"\n            onClick={signUpgoogle}\n          >\n            <span>Sign Up with</span>\n            <img src={google_logo} alt=\"\" />\n          </button>\n          <div className=\"loginText\">\n            Have an account?&nbsp;<Link to=\"/login\">Login</Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  ) : (\n    <Loading />\n  );\n}\n\nexport default Signup;\n","/home/pranil/My code/conquer/src/Components/Daily/Daily.js",["144"],"import React from \"react\";\nimport Navbar from \"../Navbar/Navbar\";\nimport \"./Daily.css\";\nimport Sidebar from \"../Sidebar/Sidebar\";\nimport Calendar from \"../Calendar/Calendar\";\nimport addNotification from \"react-push-notification\";\nimport IncompleteTodosSidebar from \"../IncompleteTodosSidebar/IncompleteTodosSidebar\";\n\nfunction Daily() {\n  return (\n    <div className=\"daily\">\n      {/* this daily class encloses the entire page with navbar at its top */}\n      <Navbar />\n      <div className=\"dailyPage\">\n        {/* this dailyPage class encloses the part of the page below the navbar */}\n        <Sidebar />\n        <div className=\"dailyPageEmpty\">\n          {/* this  dailyPageEmpty class encloses the part of the page below the navbar and to the right of the sidebar */}\n          <Calendar />\n          <IncompleteTodosSidebar timeType=\"daily\" />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Daily;\n","/home/pranil/My code/conquer/src/Components/Loading/Loading.js",[],"/home/pranil/My code/conquer/src/Components/Week/Week.js",["145"],"import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport IncompleteTodosSidebar from \"../IncompleteTodosSidebar/IncompleteTodosSidebar\";\nimport Navbar from \"../Navbar/Navbar\";\nimport Sidebar from \"../Sidebar/Sidebar\";\nimport WeekCalendar from \"../WeekCalendar/WeekCalendar\";\nimport \"./Week.css\";\nfunction Week() {\n  return (\n    <div className=\"week\">\n      <Navbar />\n      <div className=\"weekPage\">\n        <Sidebar />\n        <div className=\"weekPageEmpty\">\n          <WeekCalendar />\n          <IncompleteTodosSidebar timeType=\"week\" />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Week;\n","/home/pranil/My code/conquer/src/Components/Year/Year.js",["146","147","148"],"import React from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport Navbar from \"../Navbar/Navbar\";\nimport Sidebar from \"../Sidebar/Sidebar\";\nimport \"./Year.css\";\nfunction Year() {\n  let history = useHistory();\n  const year = useLocation().state;\n  //if an year in incomplete todos sidebar is clicked then the specific year is passed in the object state...but if the year is just rendered and no specfic year is clicked then this will be undefined\n  \n  history.push({\n    pathname: \"/year/allTodos\",\n    state: {\n      time: year != undefined ? year.time : new Date().getFullYear(),\n      lastPage: \"year\",\n    },\n  });\n  return <div></div>;\n}\n\nexport default Year;\n","/home/pranil/My code/conquer/src/Components/Month/Month.js",["149"],"import React, { useState } from \"react\";\nimport Navbar from \"../Navbar/Navbar\";\nimport Sidebar from \"../Sidebar/Sidebar\";\nimport IncompleteTodosSidebar from \"../IncompleteTodosSidebar/IncompleteTodosSidebar\";\nimport MonthCalendar from \"../MonthCalendar/MonthCalendar\";\nimport \"./Month.css\";\n\nfunction Month() {\n  return (\n    <div className=\"month\">\n      <Navbar />\n      <div className=\"monthPage\">\n        <Sidebar />\n        <div className=\"monthPageEmpty\">\n          <MonthCalendar/>\n          <IncompleteTodosSidebar timeType=\"month\" />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Month;\n","/home/pranil/My code/conquer/src/Components/VisionBoard/VisionBoard.js",[],"/home/pranil/My code/conquer/src/Components/LongTerm/LongTerm.js",["150","151","152"],"import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport AllTodos from \"../AllTodos/AllTodos\";\nimport Navbar from \"../Navbar/Navbar\";\nimport Sidebar from \"../Sidebar/Sidebar\";\nimport \"./LongTerm.css\";\n\nfunction LongTerm() {\n  let history = useHistory()\n  history.push({\n    pathname: \"/longTerm/allTodos\",\n    state: { time: \"Long Term Goals🎯\", lastPage: \"longTerm\" },\n  })\n  return(\n    <div></div>\n  )\n}\n\nexport default LongTerm;\n","/home/pranil/My code/conquer/src/Components/AllTodos/AllTodos.js",["153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170"],"import { Checkbox, IconButton } from \"@material-ui/core\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport Navbar from \"../Navbar/Navbar\";\nimport Sidebar from \"../Sidebar/Sidebar\";\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\nimport QueueIcon from \"@material-ui/icons/Queue\";\nimport NewTodoModal from \"../NewTodoModal/NewTodoModal\";\nimport firebaseApp from \"../../firebase\";\nimport Loading from \"../Loading/Loading\";\nimport \"./AllTodos.css\";\nimport EachTodo from \"../EachTodo/EachTodo\";\nimport YearPicker from \"../YearPicker/YearPicker\";\nimport IncompleteTodosSidebar from \"../IncompleteTodosSidebar/IncompleteTodosSidebar\";\nimport { loadingContext } from \"../../loadingContext\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\n\nfunction AllTodos() {\n  const user = useContext(loadingContext);\n  const [loading, setLoading] = useState(true);\n  const history = useHistory();\n  const location = useLocation(); //holds props\n  const [time, setTime] = useState(location.state.time); //this holds the date/month/week/year of which the user wants all todos\n  const lastPage = location.state.lastPage; //this holds daily/weekly/monthly/yearly basically the type of time wanted\n  const [finishedTodos, setFinishedTodos] = useState([]);\n  const [unfinishedTodos, setUnfinishedTodos] = useState([]);\n  //finished and unfinished todos get updated when i use loadData func\n  const [expandTaskId, setExpandTaskId] = useState(\"\");\n  const [expandTaskName, setExpandTaskName] = useState(\"\");\n  const [expandTaskDesc, setExpandTaskDesc] = useState(\"\");\n  const [expandTaskPri, setExpandTaskPri] = useState(\"0\");\n  const [expandTaskIndex, setExpandTaskIndex] = useState(0)\n  //if any specific todo is clicked, all these expandTask details will be passed as a prop to the modal\n  \n  const [openTodoModal, setOpenTodoModal] = useState(false);\n  //whenever this is true modal with required props is rendered\n\n  function loadData() {\n    //this function fetches todos from firebase of the specific time, distinguishes them as finished and unfinished and stores them in state variables\n    firebaseApp\n      .firestore()\n      .collection(\"todos\")\n      .where(\"user\", \"==\", firebaseApp.auth().currentUser.uid)\n      .where(\"time\", \"==\", time)\n      .orderBy(\"priority\", \"desc\")\n      .get()\n      .then((snap) => {\n        setLoading(true);\n        //i know it seems silly to setLoading true and false one after another... i don't why but if i don't do that then unwanted tasks get ticked...\n        let finished = [];\n        let unfinished = [];\n        snap.docs.map((each) => {\n          let eachdict = {\n            id: each.id,\n            taskName: each.get(\"taskName\"),\n            taskDesc: each.get(\"taskDesc\"),\n            priority: each.get(\"priority\"),\n            finished: each.get(\"finished\"),\n            time: each.get(\"time\"),\n            index: each.get(\"index\"),\n            timeType: each.get(\"timeType\"),\n          };\n          if (each.get(\"finished\")) {\n            //each doc in todos collection of firebase is added to either finished or unfinished list based on its finished status\n            finished.push(eachdict);\n          } else {\n            unfinished.push(eachdict);\n          }\n        });\n        setFinishedTodos(\n          finished.sort((a, b) => {\n            return a.index - b.index;\n          })\n        );\n        setUnfinishedTodos(\n          unfinished.sort((a, b) => {\n            return a.index - b.index;\n          })\n        );\n        setLoading(false);\n      });\n  }\n  function replaceDate(date) {\n    //this func takes date and removes the space and year from it...\n    return date.replace(/\\s\\d{4}/g, \"\");\n  }\n  function expandTodo(id, taskName, taskDesc, taskPri, index) {\n    //this function uses the parameters given by the particular todo triggering this function and sets those parameters equal to the state..then the modal is opened with these states as props\n    setExpandTaskName(taskName);\n    setExpandTaskDesc(taskDesc);\n    setExpandTaskPri(taskPri);\n    setExpandTaskId(id);\n    setExpandTaskIndex(index)\n    setOpenTodoModal(true);\n  }\n  function expandBlankTodo() {\n    //this opens a blank todo with no props regarding details of any todo\n    setExpandTaskName(\"\");\n    setExpandTaskDesc(\"\");\n    setExpandTaskPri(\"0\");\n    setExpandTaskId(\"\");\n    setOpenTodoModal(true);\n  }\n  useEffect(() => {\n    if (user) {\n      loadData();\n    } else {\n      setLoading(true);\n    }\n  }, [time, user]); //passed time here so that in yearly todos when i update the year data gets loaded again..\n\n  function priPosition() {\n    //this function computes the appropriate position for any new todo of each priority\n    //it returns an array something like this [[3,1], [2, 4], [1, 8], [0, 10]]\n    //it means the  array has 1 todo already exisiting at 0 position so appropriate position for new element of priority 3 is 1 and so on\n\n    let reqPos = [];\n    for (let i = 3; i >= 0; i--) {\n      if (unfinishedTodos.length != 0){\n       for(let index=0; index<unfinishedTodos.length; index++){\n        if (i > unfinishedTodos[index].priority) {\n          reqPos.push([i, index]);\n          break;\n        }else if(index==unfinishedTodos.length-1){\n          reqPos.push([i, unfinishedTodos.length])\n        }\n      } \n      }else{\n        reqPos.push([i,0])\n      }\n    }\n    return reqPos;\n  }\n\n  function rearrangeList(props) {\n    //this func deals with changes the todo position on drag end and also saves the positions in firebase\n    if (props.destination != null) {\n      //this is evaluated true if drag isn't outside the draggable\n      let droppable = props.source.droppableId;\n      let initialPos = props.source.index;\n      let finalPos = props.destination.index;\n      if (droppable == \"unfinishedTodos\") {\n        let initialTaskPri = unfinishedTodos[initialPos].priority;\n        let finalTaskPri = unfinishedTodos[finalPos].priority;\n        if (initialTaskPri == finalTaskPri) {\n          //this condition ensures that item will be dropped only its interchanged with items of same priority\n          unfinishedTodos.splice(\n            finalPos,\n            0,\n            unfinishedTodos.splice(initialPos, 1)[0]\n          );\n          //splices removes the element from intial position and pastes it in new position\n\n          unfinishedTodos.forEach((each, index) => {\n            firebaseApp.firestore().collection(\"todos\").doc(each.id).update({\n              index: index,\n            });\n          });\n          //this saves the new list order in firebase\n        }\n      } else {\n        let initialTaskPri = finishedTodos[initialPos].priority;\n        let finalTaskPri = finishedTodos[finalPos].priority;\n        if (initialTaskPri == finalTaskPri) {\n          finishedTodos.splice(\n            finalPos,\n            0,\n            finishedTodos.splice(initialPos, 1)[0]\n          );\n          finishedTodos.forEach((each, index) => {\n            firebaseApp.firestore().collection(\"todos\").doc(each.id).update({\n              index: index,\n            });\n          });\n        }\n      }\n    }\n  }\n  return (\n    <div className=\"allTodos\">\n      {openTodoModal ? (\n        <NewTodoModal\n          time={time}\n          shouldReload={() => loadData()}\n          openTodoModal={(shouldOpen) => setOpenTodoModal(shouldOpen)}\n          //this function can change the state which controls opening and closing of modal\n          taskId={expandTaskId}\n          taskName={expandTaskName}\n          taskDesc={expandTaskDesc}\n          taskPri={expandTaskPri}\n          taskIndex={expandTaskIndex}\n          lastPage={lastPage}\n          priPosition={priPosition()}\n          unfinishedTodos={unfinishedTodos}\n        />\n      ) : (\n        <div></div>\n      )}\n      <Navbar />\n      <div className=\"allTodosPage\">\n        <Sidebar />\n        <div\n          className={\n            lastPage == \"year\"\n              ? \"allTodosPageEmpty thisIsYear\"\n              : lastPage == \"longTerm\"\n              ? \"allTodosPageEmpty thisIsLongTerm\"\n              : \"allTodosPageEmpty\"\n          }\n        >\n          <div className=\"allTodosCont\">\n            <div className=\"topbar\">\n              {lastPage != \"longTerm\" && lastPage != \"year\" ? (\n                <IconButton\n                  title=\"Back\"\n                  onClick={() => history.push(`/${lastPage}`)}\n                >\n                  <ArrowBackIcon />\n                </IconButton>\n              ) : (\n                <div></div>\n              )}\n              {lastPage != \"year\" ? (\n                <span className=\"time\">{replaceDate(time)}</span>\n              ) : (\n                <div className=\"modifiedYearPicker\">\n                  <YearPicker\n                    year={time}\n                    changeYear={(year) => setTime(year)}\n                  />\n                </div>\n              )}\n              <IconButton onClick={() => expandBlankTodo()} title=\"New Todo\">\n                <QueueIcon />\n              </IconButton>\n            </div>\n            {loading ? (\n              <Loading />\n            ) : unfinishedTodos.length != 0 || finishedTodos.length != 0 ? (\n              <div className=\"mainTodos\">\n                <DragDropContext\n                  onDragEnd={(props) => {\n                    rearrangeList(props);\n                  }}\n                >\n                  {unfinishedTodos.length != 0 ? (\n                    <div className=\"unfinishedTodos\">\n                      <div className=\"noUnfinished noTodos\">\n                        {unfinishedTodos.length} unfinished\n                      </div>\n                      <Droppable droppableId=\"unfinishedTodos\">\n                        {(provided) => (\n                          <div\n                            className=\"unfinishedTodosList\"\n                            {...provided.droppableProps}\n                            ref={provided.innerRef}\n                          >\n                            {unfinishedTodos.map((each, index) => (\n                              <EachTodo\n                                id={each.id}\n                                key={each.id}\n                                index={index}\n                                priority={each.priority}\n                                taskName={each.taskName}\n                                taskDesc={each.taskDesc}\n                                finished={each.finished}\n                                time={each.time}\n                                timeType={each.timeType}\n                                unfinishedTodos={unfinishedTodos}\n                                startLoading={() => loadData()}\n                                activateLoader={(shouldLoad) =>\n                                  setLoading(shouldLoad)\n                                }\n                                expandTodo={(id, taskName, taskDesc, taskPri, index) =>\n                                  expandTodo(id, taskName, taskDesc, taskPri, index)\n                                }\n                                sidebarTodo={false}\n                              />\n                            ))}\n                            {provided.placeholder}\n                          </div>\n                        )}\n                      </Droppable>\n                    </div>\n                  ) : (\n                    <div></div>\n                  )}\n                </DragDropContext>\n                <DragDropContext\n                  onDragEnd={(props) => {\n                    rearrangeList(props);\n                  }}\n                >\n                  {finishedTodos.length != 0 ? (\n                    <div className=\"finishedTodos\">\n                      <div className=\"noFinished noTodos\">\n                        {finishedTodos.length} finished\n                      </div>\n                      <Droppable droppableId=\"finishedTodos\">\n                        {(provided) => (\n                          <div\n                            className=\"finishedTodosList\"\n                            {...provided.droppableProps}\n                            ref={provided.innerRef}\n                          >\n                            {finishedTodos.map((each, index) => (\n                              <EachTodo\n                                id={each.id}\n                                key={each.id}\n                                index={index}\n                                priority={each.priority}\n                                taskName={each.taskName}\n                                taskDesc={each.taskDesc}\n                                finished={each.finished}\n                                time={each.time}\n                                timeType={each.timeType}\n                                unfinishedTodos={unfinishedTodos}\n                                startLoading={() => loadData()}\n                                activateLoader={(shouldLoad) =>\n                                  setLoading(shouldLoad)\n                                }\n                                expandTodo={(id, taskName, taskDesc, taskPri, index) =>\n                                  expandTodo(id, taskName, taskDesc, taskPri, index)\n                                }\n                                sidebarTodo={false}\n                              />\n                            ))}\n                            {provided.placeholder}\n                          </div>\n                        )}\n                      </Droppable>\n                    </div>\n                  ) : (\n                    <div></div>\n                  )}\n                </DragDropContext>\n              </div>\n            ) : (\n              //this is rendered if the length of both finished and unfinished todos is 0\n              <div className=\"noTodosMessage\">No tasks added yet!</div>\n            )}\n          </div>\n          {lastPage == \"year\" ? (\n            <IncompleteTodosSidebar timeType=\"year\" />\n          ) : (\n            <div></div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default AllTodos;\n","/home/pranil/My code/conquer/src/Components/Navbar/Navbar.js",["171"],"import React, { useContext } from \"react\";\nimport \"./Navbar.css\";\nimport logo from \"../../images/conquerLogo.svg\";\nimport { Link } from \"react-router-dom\";\nimport { loadingContext } from \"../../loadingContext\";\nimport firebaseApp from \"../../firebase\";\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\nimport { IconButton } from \"@material-ui/core\";\n\nfunction Navbar() {\n  const user = useContext(loadingContext);\n  return (\n    <div className=\"navbar\">\n      <img src={logo} className=\"conquerLogo\" alt=\"\" />\n      <Link to=\"/\" className=\"conquerText\">\n        Conquer\n      </Link>\n      {user == null || user == false ? (\n        <span></span>\n      ) : (\n        <IconButton onClick={() => firebaseApp.auth().signOut()} title=\"Logout\">\n          <ExitToAppIcon className=\"logoutText\" />\n        </IconButton>\n      )}\n    </div>\n  );\n}\n\nexport default Navbar;\n","/home/pranil/My code/conquer/src/Components/Sidebar/Sidebar.js",["172","173","174","175","176","177","178","179"],"import React, { useEffect } from \"react\";\nimport \"./Sidebar.css\";\nimport notesIcon from \"../../images/notesIcon.svg\";\nimport dailyIcon from \"../../images/dailyIcon.svg\";\nimport weekIcon from \"../../images/weekIcon.svg\";\nimport monthIcon from \"../../images/monthIcon.svg\";\nimport yearIcon from \"../../images/yearIcon.svg\";\nimport longTermIcon from \"../../images/longTermIcon.svg\";\nimport visionBoardIcon from \"../../images/visionBoardIcon.svg\";\nimport { IconButton } from \"@material-ui/core\";\nimport { Link } from \"react-router-dom\";\n\nfunction Sidebar() {\n  function changeColor() {\n    let currentLink = window.location.pathname.split(\"/\")[1];\n    //window.location gives the link after main link(localhost or netlify url)\n    let reqElement = document.getElementsByClassName(\n      `sidebarIcon ${currentLink}`\n    )[0];\n    reqElement.classList.add(\"colorMe\");\n  }\n  useEffect(() => {\n    changeColor();\n  }, []);\n  return (\n    <div className=\"sidebar\">\n      <Link to=\"/notes\" title=\"Notes\">\n        <img src={notesIcon} className=\"notes sidebarIcon\" />\n      </Link>\n      <Link to=\"/daily\" title=\"Daily Goals\">\n        <img src={dailyIcon} className=\"daily sidebarIcon\" />\n      </Link>\n      <Link to=\"/week\" title=\"Weekly Goals\">\n        <img src={weekIcon} className=\"week sidebarIcon\" />\n      </Link>\n      <Link to=\"/month\" title=\"Monthly Goals\">\n        <img src={monthIcon} className=\"month sidebarIcon\" />\n      </Link>\n      <Link to=\"/year\" title=\"Yearly Goals\">\n        <img src={yearIcon} className=\"year sidebarIcon\" />\n      </Link>\n      <Link to=\"/longTerm\" title=\"Long Term Goals\">\n        <img src={longTermIcon} className=\"longTerm sidebarIcon\" />\n      </Link>\n      <Link to=\"/visionBoard\" title=\"Vision Board\">\n        <img src={visionBoardIcon} className=\"visionBoard sidebarIcon\" />\n      </Link>\n    </div>\n  );\n}\n\nexport default Sidebar;\n","/home/pranil/My code/conquer/src/Components/Calendar/Calendar.js",["180","181","182","183"],"/home/pranil/My code/conquer/src/Components/MonthCalendar/MonthCalendar.js",["184","185"],"import React, { useState } from \"react\";\nimport \"./MonthCalendar.css\";\nimport { Button } from \"@material-ui/core\";\nimport YearPicker from \"../YearPicker/YearPicker\";\nimport { months as singleListMonths } from \"../Calendar/Calendar\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction MonthCalendar() {\n  let history = useHistory();\n  const [year, setYear] = useState(new Date().getFullYear());\n  const months = [\n    [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\"],\n    [\"July\", \"August\", \"September\", \"October\", \"November\", \"December\"],\n  ]; //since i want to want to make 2 columns of months and css grids suck😣😣so i have made 2 separate lists of months into a mega list...so i put both of them in 2 separate divs(which obviously have flex-direction column) and give their parent flex direction row...\n  return (\n    <div className=\"monthCalendar\" >\n      <YearPicker year={year} changeYear={(year) => setYear(year)} />\n      <div className=\"allMonths\">\n        {months.map((monthset) => (\n          <div className=\"monthsColumn\">\n            {monthset.map((month) => (\n              <Button\n                className={\n                  new Date().getFullYear() == year &&\n                  singleListMonths[new Date().getMonth()] == month\n                    ? \"displayMonth currentMonth\"\n                    : \"displayMonth\"\n                }\n                onClick={() =>\n                  history.push({\n                    pathname: \"month/allTodos\",\n                    state: {\n                      time: `${month} ${year.toString()}`,\n                      lastPage: \"month\",\n                    },\n                  })\n                }\n              >\n                {month}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default MonthCalendar;\n","/home/pranil/My code/conquer/src/Components/WeekCalendar/WeekCalendar.js",["186","187","188"],"import { Button, IconButton } from \"@material-ui/core\";\nimport React, { useState } from \"react\";\nimport \"./WeekCalendar.css\";\nimport ArrowLeftIcon from \"@material-ui/icons/ArrowLeft\";\nimport ArrowRightIcon from \"@material-ui/icons/ArrowRight\";\nimport { useHistory } from \"react-router-dom\";\nimport { months } from \"../Calendar/Calendar\";\n\nfunction WeekCalendar() {\n  const [currentMonth, setCurrentMonth] = useState(new Date().getMonth());\n  const [currentYear, setCurrentYear] = useState(new Date().getFullYear());\n  const history = useHistory();\n  const weekMonths = {\n    0: \"Jan\",\n    1: \"Feb\",\n    2: \"Mar\",\n    3: \"Apr\",\n    4: \"May\",\n    5: \"June\",\n    6: \"July\",\n    7: \"Aug\",\n    8: \"Sept\",\n    9: \"Oct\",\n    10: \"Nov\",\n    11: \"Dec\",\n  }; //these r the months for the week in mainTodos\n\n  const getWeekFormattedDate = (date) => {\n    //this converts the date to the format dd M yyyy\n    return `${date.getDate()} ${\n      weekMonths[date.getMonth()]\n    } ${date.getFullYear()}`;\n  };\n\n  function replaceDate(date) {\n    //this function removes space and year from the date\n    return date.replace(/\\s\\d{4}/g, \"\");\n  }\n\n  const getDaysIn = (year, month) => {\n    //this function returns the no of days in a particular month\n    return new Date(year, month + 1, 0).getDate();\n  };\n\n  const increaseMonth = () => {\n    //this function increases the month and changes the month to jan of next year if the existing month is december\n    if (currentMonth + 1 <= 11) {\n      setCurrentMonth(currentMonth + 1);\n    } else {\n      setCurrentYear(currentYear + 1);\n      setCurrentMonth(0);\n    }\n  };\n\n  const decreaseMonth = () => {\n    //this function decreases the month and changes the month to december of previous year if the existing month is jan\n    if (currentMonth > 0) {\n      setCurrentMonth(currentMonth - 1);\n    } else {\n      setCurrentYear(currentYear - 1);\n      setCurrentMonth(11);\n    }\n  };\n\n  const getWeeks = () => {\n    //this function returns all the weeks in the current month\n\n    let noPrevDays = new Date(currentYear, currentMonth, 1).getDay() - 1;\n    noPrevDays = noPrevDays === -1 ? 6 : noPrevDays;\n    //this var holds the value of no of days in previous month which appear in the first week of this month\n\n    let noNextDays =\n      7 -\n      new Date(\n        currentYear,\n        currentMonth,\n        getDaysIn(currentYear, currentMonth)\n      ).getDay();\n    noNextDays = noNextDays === 7 ? 0 : noNextDays;\n    //this var holds the value of no of days in next month which appear in the last week of this month\n\n    let prevDays = [\n      ...Array(getDaysIn(currentYear, currentMonth - 1)).keys(),\n    ].map((x) => x + 1);\n    prevDays =\n      noPrevDays != 0 ? prevDays.slice(-noPrevDays, prevDays.length + 1) : [];\n    prevDays.forEach((name, index) => {\n      if (currentMonth > 0) {\n        prevDays[index] = `${prevDays[index]} ${\n          weekMonths[currentMonth - 1]\n        } ${currentYear}`;\n      } else {\n        prevDays[index] = `${prevDays[index]} Dec ${currentYear - 1}`;\n      }\n    });\n    //var prevDays contains all dates which are in previous month but are present in the first week of this month\n\n    let nextDays = [\n      ...Array(getDaysIn(currentYear, currentMonth + 1)).keys(),\n    ].map((x) => x + 1);\n    nextDays = nextDays.slice(0, noNextDays);\n    nextDays.forEach((name, index) => {\n      if (currentMonth + 1 <= 11) {\n        nextDays[index] = `${nextDays[index]} ${\n          weekMonths[currentMonth + 1]\n        } ${currentYear}`;\n      } else {\n        nextDays[index] = `${nextDays[index]} Jan ${currentYear + 1}`;\n      }\n    });\n    //var nextDays contains all dates which are in next month but are present in the last week of this month\n\n    let currentDays = [\n      ...Array(getDaysIn(currentYear, currentMonth)).keys(),\n    ].map((x) => x + 1);\n    currentDays.forEach((name, index) => {\n      currentDays[\n        index\n      ] = `${currentDays[index]} ${weekMonths[currentMonth]} ${currentYear}`;\n    });\n    //var currentDays holds all the dates which are present in this month\n\n    let allDays = [...prevDays, ...currentDays, ...nextDays];\n    //allDays holds all dates in all weeks of current month\n\n    let weeksList = [];\n    let today = getWeekFormattedDate(new Date());\n    for (let i=0; i < allDays.length; i = i + 7) {\n      //loops through a week\n      let foundToday = false;\n      for (let each of allDays.slice(i, i + 7)) {\n        //this loops through all days in this particular week\n        if (each == today) {\n          //when any day matches with today's date then the foundToday switch is turned true for this week\n          foundToday = true;\n        }\n      }\n      weeksList.push(\n        foundToday\n          ? `${allDays[i]}-${allDays[i + 6]}#currentWeek`\n          : `${allDays[i]}-${allDays[i + 6]}`\n        //if today's date lies in this week then foundToday ll be true and then the week ll be labelled as #currentWeek\n      );\n      foundToday = false; //foundToday is turned false before running the while loop for next week\n    }\n    return weeksList;\n  };\n\n  return (\n    <div className=\"weekCalendar\">\n      <div className=\"topbar\">\n        <IconButton color=\"secondary\" onClick={() => decreaseMonth()}>\n          <ArrowLeftIcon />\n        </IconButton>\n        <span className=\"topbarMonth\">\n          {months[currentMonth]}&nbsp;{currentYear}\n        </span>\n        <IconButton color=\"secondary\" onClick={() => increaseMonth()}>\n          <ArrowRightIcon />\n        </IconButton>\n      </div>\n      <div className=\"allWeeks\">\n        {getWeeks().map((week) => (\n          <Button\n            className={\n              week.split(\"#\")[1] == \"currentWeek\"\n                ? \"eachWeek currentWeek\"\n                : \"eachWeek\"\n            }\n            onClick={() =>\n              history.push({\n                pathname: \"week/allTodos\",\n                state: { time: week.split(\"#\")[0], lastPage: \"week\" },\n              })\n            }\n          >\n            {replaceDate(week.split(\"#\")[0])}\n          </Button>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default WeekCalendar;\n","/home/pranil/My code/conquer/src/Components/IncompleteTodosSidebar/IncompleteTodosSidebar.js",["189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205"],"import React, { useContext, useEffect, useState } from \"react\";\nimport firebaseApp from \"../../firebase\";\nimport \"./IncompleteTodosSidebar.css\";\nimport Loading from \"../Loading/Loading\";\nimport EachTodo from \"../EachTodo/EachTodo\";\nimport NewTodoModal from \"../NewTodoModal/NewTodoModal\";\nimport { months } from \"../Calendar/Calendar\";\nimport { loadingContext } from \"../../loadingContext\";\n\nfunction IncompleteTodosSidebar(props) {\n  const fullMonths = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n  const weekMonths = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"Aug\",\n    \"Sept\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ];\n  const [reqTodos, setReqTodos] = useState([]);\n  const user = useContext(loadingContext);\n  const [loading, setLoading] = useState(true);\n  const [expandTaskId, setExpandTaskId] = useState(\"\");\n  const [expandTaskName, setExpandTaskName] = useState(\"\");\n  const [expandTaskDesc, setExpandTaskDesc] = useState(\"\");\n  const [expandTaskPri, setExpandTaskPri] = useState(\"0\");\n  const [expandTaskTime, setExpandTaskTime] = useState(\"\");\n  const [expandTaskTimeType, setExpandTaskTimeType] = useState(\"\");\n  //if any specific todo is clicked, all these expandTask details will be passed as a prop to the modal\n  const [openTodoModal, setOpenTodoModal] = useState(false);\n  //whenever this is true modal with required props is rendered\n\n  function sortTodos(arr) {\n    //later in func loadReqTodos i ve taken reqTodos as a parameter and sorts it by the time and in accordance of timeType(month, daily, week, year)\n    let sortedTodos = arr;\n    sortedTodos = arr.sort((a, b)=>{\n      return a.index-b.index;\n    })\n    sortedTodos = arr.sort((a, b) => {\n      let temparr = [a.time, b.time];\n      if (props.timeType == \"year\") {\n        return temparr[1] - temparr[0];\n      } else if (props.timeType == \"month\") {\n        let newTemp = Array.from(\n          temparr.map((each) => {\n            return [fullMonths.indexOf(each.split(\" \")[0]), each.split(\" \")[1]];\n          })\n        ); //this is something like this [[0, 2021],[8, 2022]]\n        let compareYear = newTemp[1][1] - newTemp[0][1]; //this contains the difference of years\n        let compareMonth = newTemp[1][0] - newTemp[0][0]; //this contains the difference of months\n        if (compareYear != 0) {\n          //evaluates true if its not the same year\n          return compareYear;\n        } else {\n          return compareMonth;\n        }\n      } else if (props.timeType == \"week\") {\n        let newTemp = Array.from(\n          temparr.map((each) => {\n            let reqWeek = each.split(\"-\")[0].split(\" \"); //this stores the first part of the week like [\"4\", \"Jan\", \"2021\"]\n            reqWeek[1] = weekMonths.indexOf(reqWeek[1]); //replaces the name of the month to a no\n            return reqWeek;\n          })\n        );\n        let compareYear = newTemp[1][2] - newTemp[0][2]; //this contains the difference of years\n        let compareMonth = newTemp[1][1] - newTemp[0][1]; //this contains the difference of months\n        let compareDay = newTemp[1][0] - newTemp[0][0];\n        if (compareYear != 0) {\n          //evaluates true if its not the same year\n          return compareYear;\n        } else if (compareMonth != 0) {\n          //evaluates true if its not the same month\n          return compareMonth;\n        } else {\n          //evaluates true if its not the same day\n          return compareDay;\n        }\n      } else if (props.timeType == \"daily\") {\n        let newTemp = Array.from(\n          temparr.map((each) => {\n            let reqDay = each.split(\"/\"); //this stores the first part of the week like [\"4\", \"1\", \"2021\"]\n            return reqDay;\n          })\n        );\n        let compareYear = newTemp[1][2] - newTemp[0][2]; //this contains the difference of years\n        let compareMonth = newTemp[1][1] - newTemp[0][1]; //this contains the difference of months\n        let compareDay = newTemp[1][0] - newTemp[0][0];\n        if (compareYear != 0) {\n          //evaluates true if its not the same year\n          return compareYear;\n        } else if (compareMonth != 0) {\n          //evaluates true if its not the same month\n          return compareMonth;\n        } else {\n          //evaluates true if its not the same day\n          return compareDay;\n        }\n      }\n    });\n    return sortedTodos;\n  }\n  function loadReqTodos() {\n    firebaseApp\n      .firestore()\n      .collection(\"todos\")\n      .where(\"user\", \"==\", firebaseApp.auth().currentUser.uid)\n      .where(\"timeType\", \"==\", props.timeType)\n      .orderBy(\"priority\", \"desc\")\n      // .orderBy(\"index\", \"asc\")\n      .onSnapshot((snap) => {\n        setLoading(true);\n        let tparray = [];\n        snap.docs.map((each) => {\n          let eachdict = {\n            id: each.id,\n            taskName: each.get(\"taskName\"),\n            taskDesc: each.get(\"taskDesc\"),\n            priority: each.get(\"priority\"),\n            finished: each.get(\"finished\"),\n            time: each.get(\"time\"),\n            index:each.get(\"index\"),\n            timeType: each.get(\"timeType\"),\n          };\n          if (!each.get(\"finished\")) {\n            tparray.push(eachdict);\n          }\n        });\n        sortTodos(tparray);\n        setReqTodos(tparray);\n        setLoading(false);\n      });\n  }\n  useEffect(() => {\n    if (user) {\n      loadReqTodos();\n    } else {\n      setLoading(true);\n    }\n  }, [user]);\n  // console.log(reqTodos);\n\n  function expandTodo(id, taskName, taskDesc, taskPri, taskTime, taskTimeType) {\n    //this function uses the parameters given by the particular todo triggering this function and sets those parameters equal to the state..then the modal is opened with these states as props\n    setExpandTaskName(taskName);\n    setExpandTaskDesc(taskDesc);\n    setExpandTaskPri(taskPri);\n    setExpandTaskId(id);\n    setExpandTaskTime(taskTime);\n    setExpandTaskTimeType(taskTimeType);\n    setOpenTodoModal(true);\n  }\n\n  return (\n    <div\n      className={\n        reqTodos.length == 0\n          ? \"incompleteTodosSidebar emptySidebar\"\n          : \"incompleteTodosSidebar\"\n      }\n    >\n      {openTodoModal ? (\n        <NewTodoModal\n          time={expandTaskTime}\n          shouldReload={() => loadReqTodos()}\n          openTodoModal={(shouldOpen) => setOpenTodoModal(shouldOpen)}\n          //this function can change the state which controls opening and closing of modal\n          taskId={expandTaskId}\n          taskName={expandTaskName}\n          taskDesc={expandTaskDesc}\n          taskPri={expandTaskPri}\n          lastPage={expandTaskTimeType}\n        />\n      ) : (\n        <div></div>\n      )}\n      {loading ? (\n        <Loading />\n      ) : reqTodos.length == 0 ? (\n        <div className=\"noTodosMessage\">No incomplete tasks!</div>\n      ) : (\n        <div\n          className={\n            props.timeType == \"year\"\n              ? \"thisIsYear incompleteTodosCont\"\n              : \"incompleteTodosCont\"\n          }\n        >\n          <div className=\"noIncompleteTodos\">\n            {reqTodos.length != 1\n              ? `${reqTodos.length} incomplete tasks`\n              : `${reqTodos.length} incomplete task`}\n          </div>\n          <div className=\"inCompleteTodos\">\n            {reqTodos.map((each) => (\n              <EachTodo\n                id={each.id}\n                priority={each.priority}\n                taskName={each.taskName}\n                taskDesc={each.taskDesc}\n                finished={each.finished}\n                time={each.time}\n                timeType={each.timeType}\n                startLoading={() => loadReqTodos()}\n                // activateLoader={(shouldLoad) => setLoading(shouldLoad)}\n                expandTodo={(\n                  id,\n                  taskName,\n                  taskDesc,\n                  taskPri,\n                  taskTime,\n                  taskTimeType\n                ) =>\n                  expandTodo(\n                    id,\n                    taskName,\n                    taskDesc,\n                    taskPri,\n                    taskTime,\n                    taskTimeType\n                  )\n                }\n                sidebarTodo={true}\n              />\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default IncompleteTodosSidebar;\n","/home/pranil/My code/conquer/src/Components/YearPicker/YearPicker.js",["206"],"import React, { useState } from \"react\";\nimport \"./YearPicker.css\";\nimport { FormControl, MenuItem, Select } from \"@material-ui/core\";\n\nfunction YearPicker(props) {\n  function getYears() {\n    //returns an array which has years from 2020 to 2100\n    let allYears = [];\n    let initialYear = 2020;\n    while (initialYear <= 2100) {\n      allYears.push(initialYear);\n      initialYear++;\n    }\n    return allYears;\n  }\n  return (\n    <div className=\"yearPicker\">\n      <FormControl>\n        <Select\n          value={props.year}\n          onChange={(e) => props.changeYear(e.target.value)}\n          displayEmpty\n          inputProps={{ \"aria-label\": \"Without label\" }}\n        >\n          {getYears().map((year) => (\n            <MenuItem value={year}>{year}</MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n    </div>\n  );\n}\n\nexport default YearPicker;\n","/home/pranil/My code/conquer/src/Components/NewTodoModal/NewTodoModal.js",["207","208","209","210","211","212"],"/home/pranil/My code/conquer/src/Components/EachTodo/EachTodo.js",["213","214","215","216","217","218","219","220"],"import {\n  Button,\n  Checkbox,\n  Dialog,\n  DialogActions,\n  DialogTitle,\n  IconButton,\n} from \"@material-ui/core\";\nimport React, { useEffect, useState } from \"react\";\nimport firebaseApp from \"../../firebase\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport \"./EachTodo.css\";\nimport { useHistory } from \"react-router-dom\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport DragIndicatorIcon from \"@material-ui/icons/DragIndicator\";\n\nfunction EachTodo(props) {\n  const [checked, setChecked] = useState(props.finished);\n  const [modalOpen, setModalOpen] = useState(false); //this state controls the delete modal\n  const history = useHistory();\n  const checkUncheckfunc = (event) => {\n    //this toggles check of todo checkbox and also toggles boolean value of finished property of that particular todo in firestore\n    setChecked(event.target.checked);\n    firebaseApp\n      .firestore()\n      .collection(\"todos\")\n      .doc(props.id)\n      .set(\n        {\n          finished: !checked ? true : false, //this seems contradictory but due to some reason value of checked is false when i check it and true when i uncheck\n        },\n        { merge: true }\n      )\n      .then(() => {\n        props.startLoading(); //this triggers that loadData func in allTodos which fetches all todos again\n      });\n  };\n  function deleteTodoManagePri(newIndex) {\n    props.unfinishedTodos.forEach((each, index) => {\n      if (index >= newIndex) {\n        firebaseApp\n          .firestore()\n          .collection(\"todos\")\n          .doc(each.id)\n          .update({\n            index: index - 1,\n          });\n      }\n    });\n  }\n  function deleteTodo() {\n    //this func deletes that particular todo\n    setModalOpen(false);\n    deleteTodoManagePri(props.index);\n    firebaseApp\n      .firestore()\n      .collection(\"todos\")\n      .doc(props.id)\n      .delete()\n      .then(() => {\n        props.startLoading();\n      });\n  }\n\n  var isMobile = {\n    //this object contains properties whose values is a func which returns true if the device being used is that property\n    Android: function () {\n      return navigator.userAgent.match(/Android/i);\n    },\n    BlackBerry: function () {\n      return navigator.userAgent.match(/BlackBerry/i);\n    },\n    iOS: function () {\n      return navigator.userAgent.match(/iPhone|iPad|iPod/i);\n    },\n    Opera: function () {\n      return navigator.userAgent.match(/Opera Mini/i);\n    },\n    Windows: function () {\n      return (\n        navigator.userAgent.match(/IEMobile/i) ||\n        navigator.userAgent.match(/WPDesktop/i)\n      );\n    },\n    any: function () {\n      return (\n        isMobile.Android() ||\n        isMobile.BlackBerry() ||\n        isMobile.iOS() ||\n        isMobile.Opera() ||\n        isMobile.Windows()\n      );\n    },\n  };\n  function handleTodoClick() {\n    if (isMobile.any() && !props.sidebarTodo) {\n      let reqElem = document.getElementById(props.id);\n      if (Array.from(reqElem.classList).includes(\"phoneTodo\")) {\n        //this conditional checks if the todo has already been clicked and if thats the case then it is expanded\n        props.expandTodo(\n          //this triggers the func in all todos which renders the todo modal with all these parameters as props\n          props.id,\n          props.taskName,\n          props.taskDesc,\n          props.priority,\n          props.index\n        );\n      } else {\n        //if the todo is not already clicked then phoneTodo is added to its classList which changes the color of the todo and also makes the delete button visible\n        reqElem.classList.add(\"phoneTodo\");\n      }\n    } else {\n      props.expandTodo(\n        //this triggers the func in all todos which renders the todo modal with all these parameters as props\n        props.id,\n        props.taskName,\n        props.taskDesc,\n        props.priority,\n        props.index\n      );\n    }\n  }\n  document.addEventListener(\"click\", (eve) => {\n    let reqElem = document.getElementById(props.id);\n    if (reqElem != null) {\n      let isClickInside = reqElem.contains(eve.target);\n      if (!isClickInside) {\n        reqElem.classList.remove(\"phoneTodo\");\n      }\n    }\n  });\n  function ConstJSX(newProps) {\n    return (\n      <div\n        className={isMobile.any() ? \"eachTodo\" : \"eachTodo laptopTodo\"}\n        id={props.id}\n      >\n        <Dialog\n          open={modalOpen}\n          onClose={() => setModalOpen(false)}\n          aria-labelledby=\"alert-dialog-title\"\n          aria-describedby=\"alert-dialog-description\"\n        >\n          <DialogTitle id=\"alert-dialog-title\">\n            {\"Are you sure you want to delete this item from your list?\"}\n          </DialogTitle>\n          <DialogActions>\n            <Button onClick={() => setModalOpen(false)} color=\"secondary\">\n              No\n            </Button>\n            <Button onClick={deleteTodo} color=\"primary\" autoFocus>\n              Yeah\n            </Button>\n          </DialogActions>\n        </Dialog>\n        {!props.sidebarTodo && !props.finished ? (\n          <div className=\"dragger\" {...newProps.dragger}>\n            <DragIndicatorIcon style={{ color: \"#c6c4c4\" }}></DragIndicatorIcon>\n          </div>\n        ) : (\n          <div></div>\n        )}\n        <Checkbox\n          style={{\n            color: props.finished\n              ? \"#474747\"\n              : props.priority == 3\n              ? \"#ff5151\"\n              : props.priority == 2\n              ? \"#7885fb\"\n              : props.priority == 1\n              ? \"#20e734\"\n              : \"rgba(198, 196, 196, 0.61)\", //different color based on priority\n          }}\n          checked={checked}\n          onChange={checkUncheckfunc}\n          inputProps={{ \"aria-label\": \"primary checkbox\" }}\n        />\n        <div\n          className={\n            props.finished\n              ? \"finishedTodo eachTodoTaskName\"\n              : props.priority == 3\n              ? \"highPriority eachTodoTaskName\"\n              : props.priority == 2\n              ? \"mediumPriority eachTodoTaskName\"\n              : props.priority == 1\n              ? \"lowPriority eachTodoTaskName\"\n              : \"noPriority eachTodoTaskName\"\n          }\n          onClick={() => {\n            handleTodoClick();\n          }}\n        >\n          {props.taskName}\n        </div>\n        {props.sidebarTodo ? (\n          <span\n            className=\"todoTime\"\n            onClick={() =>\n              props.timeType != \"year\"\n                ? history.push({\n                    pathname: `${props.timeType}/allTodos`,\n                    state: { time: props.time, lastPage: props.timeType },\n                  })\n                : history.push({\n                    pathname: \"/year\",\n                    state: { time: props.time },\n                  })\n            }\n          >\n            {props.time}\n          </span>\n        ) : (\n          <span className=\"noTodoTime\"></span>\n        )}\n        <IconButton onClick={() => setModalOpen(true)}>\n          <DeleteIcon\n            style={{\n              color: \"#FF3131\",\n            }}\n          />\n        </IconButton>\n      </div>\n    );\n  }\n\n  return !props.sidebarTodo ? (\n    <Draggable draggableId={props.id} index={props.index}>\n      {(provided, snapshot) => (\n        <div {...provided.draggableProps} ref={provided.innerRef}>\n          <ConstJSX dragger={provided.dragHandleProps} />\n        </div>\n      )}\n    </Draggable>\n  ) : (\n    <ConstJSX />\n  );\n}\n\nexport default EachTodo;\n",{"ruleId":"221","replacedBy":"222"},{"ruleId":"223","replacedBy":"224"},{"ruleId":"225","severity":1,"message":"226","line":2,"column":25,"nodeType":"227","messageId":"228","endLine":2,"endColumn":30},{"ruleId":"225","severity":1,"message":"229","line":9,"column":8,"nodeType":"227","messageId":"228","endLine":9,"endColumn":15},{"ruleId":"230","severity":1,"message":"231","line":14,"column":18,"nodeType":"232","messageId":"233","endLine":14,"endColumn":20},{"ruleId":"230","severity":1,"message":"231","line":14,"column":18,"nodeType":"232","messageId":"233","endLine":14,"endColumn":20},{"ruleId":"225","severity":1,"message":"234","line":1,"column":27,"nodeType":"227","messageId":"228","endLine":1,"endColumn":37},{"ruleId":"225","severity":1,"message":"235","line":11,"column":3,"nodeType":"227","messageId":"228","endLine":11,"endColumn":16},{"ruleId":"225","severity":1,"message":"236","line":12,"column":3,"nodeType":"227","messageId":"228","endLine":12,"endColumn":20},{"ruleId":"225","severity":1,"message":"237","line":15,"column":3,"nodeType":"227","messageId":"228","endLine":15,"endColumn":8},{"ruleId":"225","severity":1,"message":"238","line":1,"column":17,"nodeType":"227","messageId":"228","endLine":1,"endColumn":26},{"ruleId":"225","severity":1,"message":"239","line":6,"column":8,"nodeType":"227","messageId":"228","endLine":6,"endColumn":23},{"ruleId":"225","severity":1,"message":"240","line":2,"column":10,"nodeType":"227","messageId":"228","endLine":2,"endColumn":20},{"ruleId":"225","severity":1,"message":"241","line":3,"column":8,"nodeType":"227","messageId":"228","endLine":3,"endColumn":14},{"ruleId":"225","severity":1,"message":"242","line":4,"column":8,"nodeType":"227","messageId":"228","endLine":4,"endColumn":15},{"ruleId":"230","severity":1,"message":"243","line":14,"column":18,"nodeType":"232","messageId":"233","endLine":14,"endColumn":20},{"ruleId":"225","severity":1,"message":"244","line":1,"column":17,"nodeType":"227","messageId":"228","endLine":1,"endColumn":25},{"ruleId":"225","severity":1,"message":"245","line":3,"column":8,"nodeType":"227","messageId":"228","endLine":3,"endColumn":16},{"ruleId":"225","severity":1,"message":"241","line":4,"column":8,"nodeType":"227","messageId":"228","endLine":4,"endColumn":14},{"ruleId":"225","severity":1,"message":"242","line":5,"column":8,"nodeType":"227","messageId":"228","endLine":5,"endColumn":15},{"ruleId":"225","severity":1,"message":"246","line":1,"column":10,"nodeType":"227","messageId":"228","endLine":1,"endColumn":18},{"ruleId":"247","severity":1,"message":"248","line":52,"column":30,"nodeType":"249","messageId":"250","endLine":52,"endColumn":32},{"ruleId":"251","severity":1,"message":"252","line":110,"column":6,"nodeType":"253","endLine":110,"endColumn":18,"suggestions":"254"},{"ruleId":"230","severity":1,"message":"243","line":119,"column":34,"nodeType":"232","messageId":"233","endLine":119,"endColumn":36},{"ruleId":"230","severity":1,"message":"231","line":124,"column":23,"nodeType":"232","messageId":"233","endLine":124,"endColumn":25},{"ruleId":"230","severity":1,"message":"231","line":142,"column":21,"nodeType":"232","messageId":"233","endLine":142,"endColumn":23},{"ruleId":"230","severity":1,"message":"231","line":145,"column":28,"nodeType":"232","messageId":"233","endLine":145,"endColumn":30},{"ruleId":"230","severity":1,"message":"231","line":164,"column":28,"nodeType":"232","messageId":"233","endLine":164,"endColumn":30},{"ruleId":"230","severity":1,"message":"231","line":204,"column":22,"nodeType":"232","messageId":"233","endLine":204,"endColumn":24},{"ruleId":"230","severity":1,"message":"231","line":206,"column":26,"nodeType":"232","messageId":"233","endLine":206,"endColumn":28},{"ruleId":"230","severity":1,"message":"243","line":213,"column":25,"nodeType":"232","messageId":"233","endLine":213,"endColumn":27},{"ruleId":"230","severity":1,"message":"243","line":213,"column":51,"nodeType":"232","messageId":"233","endLine":213,"endColumn":53},{"ruleId":"230","severity":1,"message":"243","line":223,"column":25,"nodeType":"232","messageId":"233","endLine":223,"endColumn":27},{"ruleId":"230","severity":1,"message":"243","line":239,"column":40,"nodeType":"232","messageId":"233","endLine":239,"endColumn":42},{"ruleId":"230","severity":1,"message":"243","line":239,"column":69,"nodeType":"232","messageId":"233","endLine":239,"endColumn":71},{"ruleId":"230","severity":1,"message":"243","line":246,"column":43,"nodeType":"232","messageId":"233","endLine":246,"endColumn":45},{"ruleId":"230","severity":1,"message":"243","line":294,"column":41,"nodeType":"232","messageId":"233","endLine":294,"endColumn":43},{"ruleId":"230","severity":1,"message":"231","line":343,"column":21,"nodeType":"232","messageId":"233","endLine":343,"endColumn":23},{"ruleId":"230","severity":1,"message":"231","line":18,"column":29,"nodeType":"232","messageId":"233","endLine":18,"endColumn":31},{"ruleId":"225","severity":1,"message":"255","line":10,"column":10,"nodeType":"227","messageId":"228","endLine":10,"endColumn":20},{"ruleId":"256","severity":1,"message":"257","line":28,"column":9,"nodeType":"258","endLine":28,"endColumn":62},{"ruleId":"256","severity":1,"message":"257","line":31,"column":9,"nodeType":"258","endLine":31,"endColumn":62},{"ruleId":"256","severity":1,"message":"257","line":34,"column":9,"nodeType":"258","endLine":34,"endColumn":60},{"ruleId":"256","severity":1,"message":"257","line":37,"column":9,"nodeType":"258","endLine":37,"endColumn":62},{"ruleId":"256","severity":1,"message":"257","line":40,"column":9,"nodeType":"258","endLine":40,"endColumn":60},{"ruleId":"256","severity":1,"message":"257","line":43,"column":9,"nodeType":"258","endLine":43,"endColumn":68},{"ruleId":"256","severity":1,"message":"257","line":46,"column":9,"nodeType":"258","endLine":46,"endColumn":74},{"ruleId":"230","severity":1,"message":"243","line":60,"column":18,"nodeType":"232","messageId":"233","endLine":60,"endColumn":20},{"ruleId":"230","severity":1,"message":"243","line":120,"column":33,"nodeType":"232","messageId":"233","endLine":120,"endColumn":35},{"ruleId":"230","severity":1,"message":"243","line":120,"column":64,"nodeType":"232","messageId":"233","endLine":120,"endColumn":66},{"ruleId":"251","severity":1,"message":"259","line":127,"column":6,"nodeType":"253","endLine":127,"endColumn":31,"suggestions":"260"},{"ruleId":"230","severity":1,"message":"231","line":24,"column":44,"nodeType":"232","messageId":"233","endLine":24,"endColumn":46},{"ruleId":"230","severity":1,"message":"231","line":25,"column":59,"nodeType":"232","messageId":"233","endLine":25,"endColumn":61},{"ruleId":"230","severity":1,"message":"243","line":86,"column":18,"nodeType":"232","messageId":"233","endLine":86,"endColumn":20},{"ruleId":"230","severity":1,"message":"231","line":133,"column":18,"nodeType":"232","messageId":"233","endLine":133,"endColumn":20},{"ruleId":"230","severity":1,"message":"231","line":166,"column":34,"nodeType":"232","messageId":"233","endLine":166,"endColumn":36},{"ruleId":"225","severity":1,"message":"261","line":7,"column":10,"nodeType":"227","messageId":"228","endLine":7,"endColumn":16},{"ruleId":"247","severity":1,"message":"262","line":58,"column":35,"nodeType":"249","messageId":"263","endLine":58,"endColumn":37},{"ruleId":"230","severity":1,"message":"231","line":60,"column":26,"nodeType":"232","messageId":"233","endLine":60,"endColumn":28},{"ruleId":"230","severity":1,"message":"231","line":62,"column":33,"nodeType":"232","messageId":"233","endLine":62,"endColumn":35},{"ruleId":"230","severity":1,"message":"243","line":70,"column":25,"nodeType":"232","messageId":"233","endLine":70,"endColumn":27},{"ruleId":"230","severity":1,"message":"231","line":76,"column":33,"nodeType":"232","messageId":"233","endLine":76,"endColumn":35},{"ruleId":"230","severity":1,"message":"243","line":87,"column":25,"nodeType":"232","messageId":"233","endLine":87,"endColumn":27},{"ruleId":"230","severity":1,"message":"243","line":90,"column":33,"nodeType":"232","messageId":"233","endLine":90,"endColumn":35},{"ruleId":"230","severity":1,"message":"231","line":97,"column":33,"nodeType":"232","messageId":"233","endLine":97,"endColumn":35},{"ruleId":"230","severity":1,"message":"243","line":107,"column":25,"nodeType":"232","messageId":"233","endLine":107,"endColumn":27},{"ruleId":"230","severity":1,"message":"243","line":110,"column":33,"nodeType":"232","messageId":"233","endLine":110,"endColumn":35},{"ruleId":"247","severity":1,"message":"248","line":132,"column":30,"nodeType":"249","messageId":"250","endLine":132,"endColumn":32},{"ruleId":"251","severity":1,"message":"264","line":158,"column":6,"nodeType":"253","endLine":158,"endColumn":12,"suggestions":"265"},{"ruleId":"230","severity":1,"message":"231","line":175,"column":25,"nodeType":"232","messageId":"233","endLine":175,"endColumn":27},{"ruleId":"230","severity":1,"message":"231","line":197,"column":27,"nodeType":"232","messageId":"233","endLine":197,"endColumn":29},{"ruleId":"230","severity":1,"message":"231","line":202,"column":28,"nodeType":"232","messageId":"233","endLine":202,"endColumn":30},{"ruleId":"230","severity":1,"message":"243","line":208,"column":30,"nodeType":"232","messageId":"233","endLine":208,"endColumn":32},{"ruleId":"225","severity":1,"message":"244","line":1,"column":17,"nodeType":"227","messageId":"228","endLine":1,"endColumn":25},{"ruleId":"225","severity":1,"message":"266","line":20,"column":18,"nodeType":"227","messageId":"228","endLine":20,"endColumn":27},{"ruleId":"230","severity":1,"message":"231","line":48,"column":20,"nodeType":"232","messageId":"233","endLine":48,"endColumn":22},{"ruleId":"230","severity":1,"message":"231","line":164,"column":21,"nodeType":"232","messageId":"233","endLine":164,"endColumn":23},{"ruleId":"230","severity":1,"message":"231","line":166,"column":28,"nodeType":"232","messageId":"233","endLine":166,"endColumn":30},{"ruleId":"230","severity":1,"message":"231","line":168,"column":28,"nodeType":"232","messageId":"233","endLine":168,"endColumn":30},{"ruleId":"230","severity":1,"message":"231","line":175,"column":21,"nodeType":"232","messageId":"233","endLine":175,"endColumn":23},{"ruleId":"225","severity":1,"message":"238","line":9,"column":17,"nodeType":"227","messageId":"228","endLine":9,"endColumn":26},{"ruleId":"230","severity":1,"message":"231","line":167,"column":32,"nodeType":"232","messageId":"233","endLine":167,"endColumn":34},{"ruleId":"230","severity":1,"message":"231","line":169,"column":32,"nodeType":"232","messageId":"233","endLine":169,"endColumn":34},{"ruleId":"230","severity":1,"message":"231","line":171,"column":32,"nodeType":"232","messageId":"233","endLine":171,"endColumn":34},{"ruleId":"230","severity":1,"message":"231","line":183,"column":32,"nodeType":"232","messageId":"233","endLine":183,"endColumn":34},{"ruleId":"230","severity":1,"message":"231","line":185,"column":32,"nodeType":"232","messageId":"233","endLine":185,"endColumn":34},{"ruleId":"230","severity":1,"message":"231","line":187,"column":32,"nodeType":"232","messageId":"233","endLine":187,"endColumn":34},{"ruleId":"230","severity":1,"message":"243","line":201,"column":30,"nodeType":"232","messageId":"233","endLine":201,"endColumn":32},"no-native-reassign",["267"],"no-negated-in-lhs",["268"],"no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar","'Loading' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'forwardRef' is defined but never used.","'DialogContent' is defined but never used.","'DialogContentText' is defined but never used.","'Slide' is defined but never used.","'useEffect' is defined but never used.","'addNotification' is defined but never used.","'useHistory' is defined but never used.","'Navbar' is defined but never used.","'Sidebar' is defined but never used.","Expected '!==' and instead saw '!='.","'useState' is defined but never used.","'AllTodos' is defined but never used.","'Checkbox' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.","ArrayExpression",["269"],"'IconButton' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'changeId'. Either include it or remove the dependency array.",["270"],"'months' is defined but never used.","Array.prototype.sort() expects a value to be returned at the end of arrow function.","expectedAtEnd","React Hook useEffect has a missing dependency: 'loadReqTodos'. Either include it or remove the dependency array.",["271"],"'settaskId' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"272","fix":"273"},{"desc":"274","fix":"275"},{"desc":"276","fix":"277"},"Update the dependencies array to be: [loadData, time, user]",{"range":"278","text":"279"},"Update the dependencies array to be: [isLoading, currentMonth, changeId]",{"range":"280","text":"281"},"Update the dependencies array to be: [loadReqTodos, user]",{"range":"282","text":"283"},[4544,4556],"[loadData, time, user]",[5008,5033],"[isLoading, currentMonth, changeId]",[5542,5548],"[loadReqTodos, user]"]